#!/usr/bin/env python
"""
Edits history to deduplicate, leaving the last occurrence of each command.
Filters useless entries. Also normalises whitespace.

To install, add this to .bashrc:

    trap "~/.local/bin/cleanup-history ~/.bash_history" EXIT

"""
from sys import argv
import re

history_file = argv[1]

# regexes to ignore
# an alternative to histignore. Processing here means the history will persist
# until the next session ends, which is handy for correcting otherwise ignored
# commands. Also it applies to zsh and bash at the same time.
ignore = [
    # short things
    r"^.{1,3}$",
    # changing into relative directories
    "^cd [^\~/]"
    # taskwarrior operations (+ alias)
    r"^task",
    r"^n ",
    r"^week",
    r"^day",
    # yubikey OTP in case it's not disabled or removed
    r"^cccccc",
    r"^ls",
    # annoying if accidentally re-executed at a later date
    r"^git.+--amend",
    r"reboot",
    r"halt",
    # mouse esc codes
    r"^0",
    # commands explicitly hidden by user
    r"^ ",
    # frequent typos (see .aliases)
    r"^git psuh",
    r"^cim ",
    r"^sl ",
    r"^c ",
    r"^xs ",
    r"^cim ",
    r"^bim ",
    r"^nom ",
    r"^gi ",
    r"^cd.. ",
    r"^car ",
    # deprecations
    r"^findack ",
    r"^ack ",
]

compiled_ignore = [re.compile(i) for i in ignore]


def ignored(line):
    for pattern in compiled_ignore:
        if pattern.match(line):
            return True

    return False


with open(history_file, "rb") as f:
    # strip lines and remove non utf-8 chars
    lines = [line.decode("utf-8", "ignore").replace("\ufffd", "").strip() for line in f]


seen = set()
new_lines = list()

# note that reversed() does not copy lines, just results in reversed iteration
for line in reversed(lines):
    line = " ".join(line.split())  # remove multiple whitespace
    if not ignored(line) and line not in seen:
        new_lines.append(line)
        seen.add(line)

new_lines.reverse()

with open(history_file, "w") as f:
    for line in new_lines:
        f.write(line + "\n")
