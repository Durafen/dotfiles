#!/usr/bin/env python
# Sync all projects from official origins and install dotfiles
# If dotfiles is not installed yet, after provisioning you can do
#
#     curl https://github.com/naggie/dotfiles/raw/master/bin/sync-projects | python

# specify project name on command line to sync only one project
from subprocess import call
import os
import re
import sys

# clone/pull all my repositories.
# TODO: automatically enumerate github

# Doing things this way increases redundancy, highlights active projects and
# sets official origins.

active = [
	'git@github.com:naggie/dotfiles.git',
	'git@github.com:naggie/naggie.github.com.git',
	'git@github.com:naggie/darksky.git',
	'git@github.com:naggie/dscrates.git',
	'git@github.com:naggie/megafilter.git',
	'git@github.com:naggie/speakers.git',
	'git@github.com:naggie/DSPA.git',
	'git@github.com:naggie/notes.git',
        'git@gitlab.com:naggie/dsdrop.git',
]

inactive = [
	'git@github.com:naggie/runuo.git',
	'git@github.com:naggie/nnplus.git',
	'git@github.com:naggie/ninja-motor-controller.git',
	'git@github.com:naggie/dschat.git',
	'git@github.com:naggie/averclock.git',
	'git@github.com:naggie/vosbox.git',
	'git@github.com:naggie/MLDASH.git',
	'git@github.com:naggie/algalon.git',
        'git@gitlab.com:naggie/rcdos.git',
]

def step(text):
	'Declare a step in execution. Simply print in green.'
	print '\033[92m%s\033[0m' % text

def sync(urls):
	origin = os.getcwd()
	for url in urls:
		dir = re.search(r"([\.\-0-9a-zA-Z]+)\.git$",url).group(1).lower()

                # one project only
                if len(sys.argv) == 2 and sys.argv[1].lower().find(dir) == -1:
                    continue

		if os.path.exists('%s/.git' % dir):
			step('FETCH %s' % dir)
			os.chdir(dir)
			# replace origin, in case that changed
			call(['git','fetch','--quiet','origin'])
			call(['git','remote','rm','origin'])
			call(['git','remote','add','origin',url])

			call(['git','fetch','--quiet','origin'])
			call(['git','merge','--ff-only','FETCH_HEAD'])
			call(['git','submodule','update'])
			os.chdir(origin)
		else:
			step('CLONE %s' % dir)
			call(['git','clone','--recursive','--quiet',url,dir])

sync(active)
if not os.path.exists('INACTIVE'):
	os.makedirs('INACTIVE')

os.chdir('INACTIVE')
sync(inactive)
os.chdir('..')

# specific project was specified
if len(sys.argv) == 2:
    sys.exit(0)

# install latest dotfiles
step('INST dotfiles')
os.chdir('dotfiles')
call(['git','checkout','naggie'])
call(['git','fetch','origin','naggie'])
call(['git','merge','--ff-only','FETCH_HEAD'])
call(['./install.sh'])
