#!/bin/bash
# Works on fedora 31.
# needs grub2-efi-x64
# reference https://github.com/aguslr/multibootusb https://wiki.archlinux.org/index.php/Multiboot_USB_drive
if [ ! -b "$1" ]; then
    echo "Usage $0 <block device>"
    exit
fi

dev=${1}

if [ "$EUID" -ne 0 ];then
    echo "Run as root"
    exit
fi

if [ ! -d /usr/lib/grub/x86_64-efi/ ]; then
    echo "package grub2-efi-x64-modules missing"
    exit
fi

function checkcmds {
    for cmd in "$@"; do
        if ! which "$cmd" >/dev/null; then
            echo "Missing cmd: $cmd"
        fi
    done
}

function unmountall {
    if mount | grep -q "${dev}"; then
        echo "Unmounting" ${dev}?*
        ls ${dev}?* | xargs -n1 umount -l || true
    fi
}

# if a command fails, exit and clean up
function cleanup {
    unmountall
}
set -e
trap cleanup EXIT

unmountall

checkcmds \
    sgdisk \
    grub2-install \
    wipefs \
    mkfs.vfat \
    syslinux \


# create GPT partition table with 1MB MBR and 50MB EFI partitions
sgdisk --zap-all "${dev}"
sgdisk --mbrtogpt "${dev}"
sgdisk --new 1::+1M --typecode 1:ef02 \
        --change-name 1:"BIOS boot partition" "${dev}"
sgdisk --new 2::+50M --typecode 2:ef00 \
        --change-name 2:"EFI System" "${dev}"

sgdisk --new 3::: --typecode 3:0700 \
        --change-name 3:"Microsoft basic data" "${dev}"

# Hybrid MBR
sgdisk --hybrid 1:2:3 "${dev}"

# make data partition bootable
sgdisk --attributes 3:set:2 "${dev}"

# zero bios boot partition
wipefs -af "${dev}1"

# wipe + format EFI partition
wipefs -af "${dev}2"
mkfs.vfat -v -F 32 "${dev}2"

# wipe+format data partition
wipefs -af "${dev}3"
mkfs.vfat -v -F 32 "${dev}3"

# make tmp mount points
efi_mnt=$(mktemp -d efi.XXXX)
data_mnt=$(mktemp -d data.XXXX)

# mount efi/data
mount "${dev}2" "$efi_mnt"
mount "${dev}3" "$data_mnt"


# install EFI grub
grub2-install --target=x86_64-efi --efi-directory="$efi_mnt" \
        --boot-directory="${data_mnt}/boot" --removable --recheck

# install MBR grub
grub2-install --force --target=i386-pc \
        --boot-directory="${data_mnt}/boot" --recheck "${dev}"

# create isos directory
mkdir -p "${data_mnt}/data/isos"


# TODO check memdisk, see multibootusb/docs/howto.md for explanation for how to
# allocate enough memory for large disks
cp /usr/share/syslinux/memdisk ${data_mnt}/boot/grub/
